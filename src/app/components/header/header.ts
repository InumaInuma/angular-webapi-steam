import { CommonModule } from '@angular/common';
import { Component } from '@angular/core';
import { Router, RouterModule } from '@angular/router';

@Component({
  selector: 'app-header',
  standalone: true,
  imports: [CommonModule, RouterModule], // ðŸ‘ˆ agrÃ©galo aquÃ­
  templateUrl: './header.html',
  styleUrl: './header.scss',
})
export class Header {
  // ðŸ‘‰ Bandera booleana que indica si el usuario estÃ¡ logeado
  // Se inicializa verificando si existe un JWT en localStorage
  isLoggedIn = !!localStorage.getItem('jwt');
  // ðŸ‘‰ Lista de roles que tiene el usuario logeado (ej: ["Customer"], ["Admin"])
  roles: string[] = [];

  constructor(private router: Router) {
    // ðŸ‘‰ Al crear el componente, leemos los roles guardados en localStorage
    // Si no hay roles guardados, dejamos el array vacÃ­o
    const storedRoles = localStorage.getItem('roles');
    this.roles = storedRoles ? JSON.parse(storedRoles) : [];
  }

  // ðŸ‘‰ MÃ©todo para cerrar sesiÃ³n
  // Elimina el JWT y los roles del localStorage y redirige al login
  logout() {
    localStorage.removeItem('jwt');
    localStorage.removeItem('roles');
    localStorage.removeItem('jwt');
    localStorage.removeItem('roles');
    this.isLoggedIn = false; // ðŸ”¹ Actualiza la bandera en frontend
    this.roles = []; // ðŸ”¹ Limpia los roles
    this.router.navigate(['/pagina-principal']); // ðŸ‘ˆ Ahora redirige al principal
  }
}
